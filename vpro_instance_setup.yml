---
- name: vpro instance setup
  hosts: localhost
  connection: local
  gather_facts: False
  tasks:

      - name: import vpc out variable
        include_vars: variable/vpc_out_variable

      - name: impor vpro stack variable
        include_vars: variable/vpro_stack

      - name: create key painr
        ec2_key:
            name: vp_stack_key
            region: "{{region}}"
        register: vp_stack_key_out


      - name: copy the vp_stack_key
        copy:
            content: "{{vp_stack_key_out.key.private_key}}"
            dest: "./vp_stack_key.pem"
            mode: 0600
        when: vp_stack_key_out.changed

      - name: create sg for fro load banced
        ec2_group:
            name: vporELB_Sg
            description: SG for the ELB
            region: "{{region}}"
            vpc_id: "{{vpcid}}"
            purge_rules: no
            rules:
                - proto: tcp
                  from_port: 80
                  to_port: 80
                  cidr_ip: 0.0.0.0/0
        register: vporELB_Sg_out


      - name: create sg for vpro stack
        ec2_group:
            name: vpor_stack_sg
            description: SG for the vpor stack
            region: "{{region}}"
            vpc_id: "{{vpcid}}"
            purge_rules: no
            rules:
                - proto: tcp
                  from_port: 80
                  to_port: 80
                  group_id: "{{vporELB_Sg_out.group_id}}"

                - proto: tcp
                  from_port: 22
                  to_port: 22
                  group_id: "{{bastion_sg}}"
        register: vpor_stack_sg_out


      - name: update the vpor_stack_sg
        ec2_group:
            name: vpor_stack_sg
            description: SG for the vpor stack
            region: "{{region}}"
            vpc_id: "{{vpcid}}"
            purge_rules: no
            rules:
                - proto: all
                  group_id: "{{vpor_stack_sg_out.group_id}}"

      - name: createing Nginx server web01
        ec2:
            key_name: vp_stack_key
            region: "{{region}}"
            instance_type: t2.micro
            image: "{{nginx_ami}}"
            wait: yes
            wait_timeout: 300
            instance_tags:
                Name: Nginx_Server
            exact_count: 1
            count_tag:
                Name: Nginx_Server
            group_id: "{{vpor_stack_sg_out.group_id}}"
            vpc_subnet_id: "{{privsub1id}}"
        register: web01_out

      - name: createing tomcat server
        ec2:
            key_name: vp_stack_key
            region: "{{region}}"
            instance_type: t2.micro
            image: "{{tomcat_ami}}"
            wait: yes
            wait_timeout: 300
            instance_tags:
                Name: Tomcat
            exact_count: 1
            count_tag:
                Name: Tomcat
            group_id: "{{vpor_stack_sg_out.group_id}}"
            vpc_subnet_id: "{{privsub1id}}"
        register: tomcat_out


      - name: createing memcahd server
        ec2:
            key_name: vp_stack_key
            region: "{{region}}"
            instance_type: t2.micro
            image: "{{memcahd_ami}}"
            wait: yes
            wait_timeout: 300
            instance_tags:
                Name: Memcahd
            exact_count: 1
            count_tag:
                Name: Memcahd
            group_id: "{{vpor_stack_sg_out.group_id}}"
            vpc_subnet_id: "{{privsub1id}}"
        register: Memcahd_out

      - name: createing bd server
        ec2:
            key_name: vp_stack_key
            region: "{{region}}"
            instance_type: t2.micro
            image: "{{mysql_ami}}"
            wait: yes
            wait_timeout: 300
            instance_tags:
                Name: db01
            exact_count: 1
            count_tag:
                Name: db01
            group_id: "{{vpor_stack_sg_out.group_id}}"
            vpc_subnet_id: "{{privsub1id}}"
        register: db01_out

      - name: createing rmq server
        ec2:
            key_name: vp_stack_key
            region: "{{region}}"
            instance_type: t2.micro
            image: "{{rmq_ami}}"
            wait: yes
            wait_timeout: 300
            instance_tags:
                Name: rmq
            exact_count: 1
            count_tag:
                Name: rmq
            group_id: "{{vpor_stack_sg_out.group_id}}"
            vpc_subnet_id: "{{privsub1id}}"
        register: rmq_out

 #     - debug:
 #          var: rmq_out

      - name: copy the instance ids in the file
        copy: 
            content: "web01: {{web01_out.tagged_instances[0].id}}\ntomcat: {{tomcat_out.tagged_instances[0].id}}\nMemcahd: {{Memcahd_out.tagged_instances[0].id}}\nrmq: {{rmq_out.tagged_instances[0].id}}\ndb01: \nrmq: {{db01_out.tagged_instances[0].id}} "
            dest: provision_stack/variables/instance_ids

      - name: copy the instance ips in the file
        copy: 
            content: "web01: {{web01_out.tagged_instances[0].private_ip}}\ntomcat: {{tomcat_out.tagged_instances[0].private_ip}}\nMemcahd: {{Memcahd_out.tagged_instances[0].private_ip}}\nrmq: {{rmq_out.tagged_instances[0].private_ip}}\ndb01: {{db01_out.tagged_instances[0].private_ip}}"
            dest: provision_stack/variables/instance_ips

      - local_action:
            module: ec2_elb_lb
            name: "vpro-ELB"
            region: "{{region}}"
            state: present
            instance_ids:
                - "{{web01_out.tagged_instances[0].id}}" 
            purge_instance_ids: true
            security_group_ids: "{{vporELB_Sg_out.group_id}}"
            subnets:
                - "{{pubsub1id}}"
                - "{{pubsub2id}}"
                - "{{pubsub3id}}"
            listeners:
                - protocol: http
                  load_balancer_port: 80
                  instance_port: 80

      - name: inster and update the inventry file
        blockinfile:
            path: provision_stack/inventry_vpro
            block: |
              web01 ansible_host={{web01_out.tagged_instances[0].private_ip}}
              app01 ansible_host={{tomcat_out.tagged_instances[0].private_ip}}
              rmq01 ansible_host={{Memcahd_out.tagged_instances[0].private_ip}}
              mc01 ansible_host={{rmq_out.tagged_instances[0].private_ip}}
              db01 ansible_host={{db01_out.tagged_instances[0].private_ip}}
              cntrl ansible_host=127.0.0.1 ansible_connection=local


              [websrvgrp]
              web01

              [appsrvgrp]
              app01

              [rmqsrvgrp]
              rmq01

              [mcsrvgrp]
              mc01

              [dbsrvgrp]
              db01

              [control]
              cntrl

              [stack_inst:children]
              websrvgrp
              appsrvgrp
              rmqsrvgrp
              mcsrvgrp
              dbsrvgrp

              [stack_inst:vars]
              ansible_user=ubuntu
              ansible_ssh_private_key_file=vp_stack_key.pem

